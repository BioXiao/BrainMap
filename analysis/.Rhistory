deletionCoords<-read.table("mm10DeletionCoords.txt",sep="\t",header=TRUE,stringsAsFactors=FALSE)
colnames(deletionCoords)<-c("gene_name","gene_region","deletionRegion")
koStrain<-name
coords<-deletionCoords[which(deletionCoords$gene_name==koStrain),3]
coords<-strsplit(coords,":")
coords<-unlist(coords)
koChr<-coords[1]
positions<-strsplit(coords[[2]],"-")
positions<-unlist(positions)
koStart<-as.numeric(positions[1])
koWidth<-abs(as.numeric(positions[2])-as.numeric(positions[1]))
doPlot(genome=genome, name=name, myChr=chrom, from=from, to=to, window=20,bamFiles=bamFiles, bamNames=bamNames, koStart=koStart,koWidth=koWidth,koChr=koChr)
doPlot<-function(genome=genome,name,myChr,from,to,window,bamFiles,bamNames,koStart,koWidth,koChr){
#Make Tracks
axTrack<-GenomeAxisTrack(add53 = TRUE,add35 = TRUE, labelPos = "above")
idxTrack <- IdeogramTrack(genome = genome, chromosome = myChr)
koTrack<-AnnotationTrack(start=koStart,width=koWidth,chromosome=koChr,strand="*",id=koStrain,genome="mm10",name="KO Region")
#BamTracks
write("\tBamTracks",stderr())
bamTracks<-list()
bamOrder<-c(1:length(bamFiles))
for (i in bamOrder){
track<-makeBamTrack(bamFiles[[i]],bamNames[[i]],genome=genome,chromosome=myChr,color=bamColors[i],window=window)
bamTracks<-c(bamTracks,track)
}
#Plot Tracks
write("\tplotting...",stderr())
# myTracks<-c(bamTracks,knownGenes)
myTracks<-c(idxTrack,axTrack,genetrack,bamTracks,koTrack)
trackSizes<-c(2,2,2,rep(1,length(bamTracks)),1)
#pdf(paste(name,".pdf",sep=""),width=10,height=8)
plotTracks(myTracks,from=from,to=to,chromosome=myChr,showAxis=FALSE,background.title="black",col.title="white",col.axis="black",sizes=trackSizes)
#dev.off()
#dbDisconnect(con)
}
doPlot(genome=genome, name=name, myChr=chrom, from=from, to=to, window=20,bamFiles=bamFiles, bamNames=bamNames, koStart=koStart,koWidth=koWidth,koChr=koChr)
doPlot<-function(genome=genome,name,myChr,from,to,window,bamFiles,bamNames,koStart,koWidth,koChr){
#Make Tracks
axTrack<-GenomeAxisTrack(add53 = TRUE,add35 = TRUE, labelPos = "above")
idxTrack <- IdeogramTrack(genome = genome, chromosome = myChr)
koTrack<-AnnotationTrack(start=koStart,width=koWidth,chromosome=koChr,strand="*",id=koStrain,genome="mm10",name="KO Region")
#BamTracks
write("\tBamTracks",stderr())
bamTracks<-list()
bamOrder<-c(1:length(bamFiles))
for (i in bamOrder){
track<-makeBamTrack(bamFiles[[i]],bamNames[[i]],genome=genome,chromosome=myChr,color=bamColors[i],window=window)
bamTracks<-c(bamTracks,track)
}
#Plot Tracks
write("\tplotting...",stderr())
# myTracks<-c(bamTracks,knownGenes)
myTracks<-c(idxTrack,axTrack,genetrack,bamTracks,koTrack)
trackSizes<-c(1,1,4,rep(1,length(bamTracks)),1)
#pdf(paste(name,".pdf",sep=""),width=10,height=8)
plotTracks(myTracks,from=from,to=to,chromosome=myChr,showAxis=FALSE,background.title="black",col.title="white",col.axis="black",sizes=trackSizes)
#dev.off()
#dbDisconnect(con)
}
doPlot(genome=genome, name=name, myChr=chrom, from=from, to=to, window=20,bamFiles=bamFiles, bamNames=bamNames, koStart=koStart,koWidth=koWidth,koChr=koChr)
bamFiles
doPlot<-function(genome=genome,name,myChr,from,to,window,bamFiles,bamNames,koStart,koWidth,koChr){
#Make Tracks
axTrack<-GenomeAxisTrack(add53 = TRUE,add35 = TRUE, labelPos = "above")
idxTrack <- IdeogramTrack(genome = genome, chromosome = myChr)
koTrack<-AnnotationTrack(start=koStart,width=koWidth,chromosome=koChr,strand="*",id=koStrain,genome="mm10",name="KO Region")
#BamTracks
write("\tBamTracks",stderr())
bamTracks<-list()
bamOrder<-c(1:length(bamFiles))
for (i in bamOrder){
track<-makeBamTrack(bamFiles[[i]],bamNames[[i]],genome=genome,chromosome=myChr,color=bamColors[i],window=window)
bamTracks<-c(bamTracks,track)
}
#Plot Tracks
write("\tplotting...",stderr())
# myTracks<-c(bamTracks,knownGenes)
myTracks<-c(idxTrack,axTrack,genetrack,bamTracks,koTrack)
trackSizes<-c(1,1,8,rep(1,length(bamTracks)),1)
#pdf(paste(name,".pdf",sep=""),width=10,height=8)
plotTracks(myTracks,from=from,to=to,chromosome=myChr,showAxis=FALSE,background.title="black",col.title="white",col.axis="black",sizes=trackSizes)
#dev.off()
#dbDisconnect(con)
}
doPlot(genome=genome, name=name, myChr=chrom, from=from, to=to, window=20,bamFiles=bamFiles, bamNames=bamNames, koStart=koStart,koWidth=koWidth,koChr=koChr)
name<-"Tug1"
myGene<-getGene(cuff,name)
genetrack <-makeGeneRegionTrack(myGene)
myGene<-getGene(cuff,name)
cuff
myGene<-getGene(cuff,name)
name<-"Morc2a"
myGene<-getGene(cuff,name)
strain<-"linc-Enc1"
timepoint<-"Embryonic"
filename<-"linc-Enc1_vs_WT_Embryonic"
analysisdir<-"/n/rinn_data1/users/agroff/GITHUB/BrainMap/analysis/"
diffdir<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/diffs"
GTF<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/annotation/mm10_gencode_vM2_with_lncRNAs_and_LacZ.gtf"
genome<-"mm10"
GTF<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/annotation/mm10_gencode_vM2_with_lncRNAs_and_LacZ.gtf"
library(cummeRbund)
setwd(dir)
cuff<-readCufflinks(gtfFile=GTF,genome=genome) #rebuild=T until all first rounds done! build sep though bc issues :-/
setwd(dir)
dir<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/diffs/linc-Enc1_vs_WT_Embryonic/"
setwd(dir)
cuff<-readCufflinks(gtfFile=GTF,genome=genome) #rebuild=T until all first rounds done! build sep though bc issues :-/
setwd(analysisdir)
setwd(diffdir)
names<-list.files()
names<-gsub("-","",names)
setwd(analysisdir)
diffGeneSummary<-data.frame(t(names), row.names=NULL)
colnames(diffGeneSummary)<-names
names
?strsplit
lincs<-lapply(names,function(x){unlist(strsplit(x,"_"))[1]})
lincs
diffGeneSummary
View(diffGeneSummary)
diffGeneSummary$unit_test<-NULL
diffGeneSummary$init<-NULL
View(diffGeneSummary)
diffGeneSummary$Adult_full<-NULL
View(diffGeneSummary)
diffGeneSummary$Embryonic_full<-NULL
lincs<-lapply(colnames(diffGeneSummary),function(x){unlist(strsplit(x,"_"))[1]})
lincs
lincs<-unlist(lincs)
lincs
lincs<-unique(lincs)
lincs
?data.frame
linc_LZ_correlation<-data.frame(row.names=lincs,col.names=c("AdultLZ", "AdultEndogenous""EmbryoLZ","EmbryoEndogenous"))
linc_LZ_correlation<-data.frame(row.names=lincs,col.names=c("AdultLZ", "AdultEndogenous","EmbryoLZ","EmbryoEndogenous"))
?rep
?matrix
linc_LZ_correlation<-data.frame(matrix(nrow=length(lincs),ncol=4),row.names=lincs,col.names=c("AdultLZ", "AdultEndogenous","EmbryoLZ","EmbryoEndogenous"))
matrix(nrow=length(lincs),ncol=4)
length(lincs)
linc_LZ_correlation<-data.frame(matrix(nrow=length(lincs),ncol=4))
rownames(linc_LZ_correlation)=lincs
colnames(linc_LZ_correlation)=c("AdultLZ", "AdultEndogenous","EmbryoLZ","EmbryoEndogenous"))
colnames(linc_LZ_correlation)=c("AdultLZ", "AdultEndogenous","EmbryoLZ","EmbryoEndogenous")
View(linc_LZ_correlation)
library(GenomicFeatures)
?makeTranscriptDbFromGFF
chromInfo<-read.table("/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/indexes/mm10/mm10_brainmap.chrom.info")
mm10DB<-makeTranscriptDbFromGFF(GTF,format="gtf",chrominfo=chromInfo,species="mus musculus")
View(chromInfo)
chromInfo<-read.table("/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/indexes/mm10/mm10_brainmap.chrom.info",header=TRUE)
mm10DB<-makeTranscriptDbFromGFF(GTF,format="gtf",chrominfo=chromInfo,species="mus musculus")
i<-1
setwd(analysisdir)
strain <-as.character(adult_directories[1,i])
timepoint<-"Adult"
filename<-paste(adult_directories[,i],collapse="_")
dir<-paste(diffdir,filename,sep="/")
dir.create(filename)
print(filename)
print(dir)
print(strain)
setwd(filename)
lincs
lincRNAsubsetGTF<-"/n/rinn_data1/users/agroff/GITHUB/BrainMap/annotation_abbie/mm10_brainmap_lincRNA_subset.gtf"
brainmap_lincs_mm10<-makeTranscriptDbFromGFF(lincRNAsubsetGTF,format="gtf",chrominfo=chromInfo,species="Mus musculus")
lincRNAsubsetGTF<-"/n/rinn_data1/users/agroff/GITHUB/BrainMap/annotation_abbie/strandless_test.gtf"
brainmap_lincs_mm10<-makeTranscriptDbFromGFF(lincRNAsubsetGTF,format="gtf",chrominfo=chromInfo,species="Mus musculus")
brainmap_lincs_mm10<-makeTranscriptDbFromGFF(lincRNAsubsetGTF,format="gtf")
i<-1
embryonic_directories<-split[,which(split[4,]=="Embryonic")]
setwd(analysisdir)
embryonic_directories<-split[,which(split[4,]=="Embryonic")]
diffdir<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/diffs"
setwd(diffdir)
files<-list.files()
names<-files
split<-data.frame(strsplit(names,"_"))
rownames(split)<-c("strain","vs","wt","timepoint")
embryonic_directories<-split[,which(split[4,]=="Embryonic")]
setwd(analysisdir)
strain <-as.character(embryonic_directories[1,i])
timepoint<-"Embryonic"
filename<-paste(embryonic_directories[,i],collapse="_")
dir<-paste(diffdir,filename,sep="/")
dir.create(filename)
print(filename)
print(dir)
print(strain)
#setwd(dir)
#cuff<-readCufflinks(gtfFile="/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/annotation/mm10_gencode_vM2_with_lncRNAs_and_LacZ.gtf",genome="mm10")
setwd(filename)
#knit2html('../StrainTemplate.Rmd',output=paste(filename,".md",sep=""), quiet=TRUE)
knit2html('../test.Rmd',output=paste(filename,"_test.md",sep=""), quiet=TRUE)
library(knitr)
knit2html('../test.Rmd',output=paste(filename,"_test.md",sep=""), quiet=TRUE)
cuff
MAplot(genes(cuff),"WT",strain_sample,useCount=T)+theme_bw()
strain_sample<-gsub("-","_",strain)#paste(strain,"_0",sep="")
MAplot(genes(cuff),"WT",strain_sample)+theme_bw()
MAplot(cuff,"WT",strain_sample)+theme_bw()
MAplot(genes(cuff),"WT",strain_sample)+theme_bw()
MAplot(genes(cuff),"WT",strain_sample)
population<-genes(cuff)
population.diff<-diffData(population)
annotation<-annotation(genes(cuff))
gene_names<-merge(annotation,population.diff)
gene_set_index <- function(genelist, short_names){
which(short_names %in% genelist)
}
get_gene_set_p_vals <- function(input, gs, alternative){
gene_set_indices <- lapply(gs$genesets, function(genelist){
gene_set_index(genelist,input$short_name)
})
pvl<-lapply(gene_set_indices,geneSetTest,input$test_stat, alternative=alternative)
pvl_mat<-as.data.frame(t(unlist(pvl)))
colnames(pvl_mat) <- gs$geneset.names
return(pvl_mat)
}
get_gene_set_q_vals <- function(pvl_mat, method="bonferroni"){
comp_corrected <- matrix(p.adjust(pvl_mat, method=method), nrow=nrow(pvl_mat), ncol=ncol(pvl_mat))
colnames(comp_corrected) <- colnames(pvl_mat)
rownames(comp_corrected) <- rownames(pvl_mat)
return(comp_corrected)
}
colMins<-function(x){
apply(x,2,min)
}
rowMins<-function(x){
apply(x,1,min)
}
InputCols<-maPalette(low="white",high="red",k=100)
ztest<-function(samp,pop){
(mean(samp,na.rm=T)-mean(pop,na.rm=T))/sd(pop,na.rm=T)
}
get_gene_set_ztest <- function(scoring_df, gs){
gene_set_indices <- lapply(gs$genesets, function(x, short_names) { gene_set_index(x, short_names)}, scoring_df$gene_short_name)
zscores <- apply(scoring_df[,-c(1,2)],2, function(mat_col){
lapply(gene_set_indices,function(gsi){
ztest(mat_col[gsi],mat_col)})
})
zscore_mat<-do.call(rbind,lapply(zscores,unlist))
colnames(zscore_mat)<- gs$geneset.names
rownames(zscore_mat) <- colnames(scoring_df[,-c(1,2)])
return(zscore_mat)
}
reactome_zscores<-get_gene_set_ztest(Input.df,reactome_gs)
df.pop<-data.frame("short_name"=toupper(gene_names$gene_short_name),"test_stat"=gene_names$test_stat)
df.pop.unique<-unique(df.pop)
strain<-"linc-Enc1"
timepoint<-"Embryonic"
filename<-"linc-Enc1_vs_WT_Embryonic"
dir<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/diffs/linc-Enc1_vs_WT_Embryonic/"
library(cummeRbund)
reactome_gs <- GSA.read.gmt("/n/rinn_data1/users/agroff/GSEA/c2.cp.reactome.v4.0.symbols.gmt")
biocarta_gs <- GSA.read.gmt("/n/rinn_data1/users/agroff/GSEA/c2.cp.biocarta.v4.0.symbols.gmt")
cuff<-readCufflinks(gtfFile=GTF,genome=genome) #rebuild=T until all first rounds done! build sep though bc issues :-/
setwd(dir)
cuff<-readCufflinks(gtfFile=GTF,genome=genome) #rebuild=T until all first rounds done! build sep though bc issues :-/
df.pop<-data.frame("short_name"=toupper(gene_names$gene_short_name),"test_stat"=gene_names$test_stat)
population<-genes(cuff)
population.diff<-diffData(population)
annotation<-annotation(genes(cuff))
gene_names<-merge(annotation,population.diff)
gene_set_index <- function(genelist, short_names){
which(short_names %in% genelist)
}
population<-genes(cuff)
population<-genes(cuff)
library(cummeRbund)
cuff
population<-genes(cuff)
population.diff<-diffData(population)
population.diff<-diffData(genes(cuff))
population<-genes(cuff)
GTF<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/annotation/mm10_gencode_vM2_with_lncRNAs_and_LacZ.gtf"
genome<-"mm10"
setwd(dir)
cuff<-readCufflinks(gtfFile=GTF,genome=genome) #rebuild=T until all first rounds done! build sep though bc issues :-/
cuff
samples(cuff)
replicates(cuff)
samples(cuff)
genes(cuff)
MAplot(genes(cuff),"WT",strain_sample)+theme_bw()
library(cummeRbund)
library(xtable)
library(limma)
library(GSA)
library(gplots)
library(marray)
library(ggplot2)
library(gtable)
library(gridExtra)
population<-genes(cuff)
?genes
setwd(analysisdir)
dbDisconnect(con)
cummerbund::genes
cummeRbund::genes
detatch(GenomicFeatures)
detach(GenomicFeatures)
detach(package:GenomicFeatures)
population<-genes(cuff)
population.diff<-diffData(population)
annotation<-annotation(genes(cuff))
gene_names<-merge(annotation,population.diff)
df.pop<-data.frame("short_name"=toupper(gene_names$gene_short_name),"test_stat"=gene_names$test_stat)
df.pop.unique<-unique(df.pop)
rownames(df.pop.unique)<-NULL
df.pop.unique.ordered<-df.pop.unique[order(df.pop.unique$test_stat),]
Input.df<-df.pop.unique.ordered
Input.df$short_name<-as.character(Input.df$short_name)
reactome_zscores<-get_gene_set_ztest(Input.df,reactome_gs)
scoring_df<-Input.df
gs<-reactome_gs
gene_set_indices <- lapply(gs$genesets, function(x, short_names) { gene_set_index(x, short_names)}, scoring_df$gene_short_name)
zscores <- apply(scoring_df[,-c(1,2)],2, function(mat_col){
lapply(gene_set_indices,function(gsi){
ztest(mat_col[gsi],mat_col)})
})
zscore_mat<-do.call(rbind,lapply(zscores,unlist))
zscore_mat
View(scoring_df)
View(Input.df)
head(Input.df)
reactome_zscores<-get_gene_set_ztest(reactome_pvl_corrected,reactome_gs)
zscores <- apply(scoring_df$short_name, function(mat_col){
lapply(gene_set_indices,function(gsi){
ztest(mat_col[gsi],mat_col)})
})
zscores <- apply(scoring_df$short_name, function(mat_col){
lapply(gene_set_indices,function(gsi){
ztest(mat_col[gsi],mat_col)})
})
zscores <- lapply(scoring_df$short_name, function(mat_col){
lapply(gene_set_indices,function(gsi){
ztest(mat_col[gsi],mat_col)})
})
?apply
zscores <- apply(scoring_df,2, function(mat_col){
lapply(gene_set_indices,function(gsi){
ztest(mat_col[gsi],mat_col)})
})
zscores
ztest(scoring_df$test_stat[gsi],scoring_df$test_stat)})
zscores <- lapply(gene_set_indices,function(gsi){
ztest(scoring_df$test_stat[gsi],scoring_df$test_stat)
})
zscores
gene_set_indices <- lapply(gs$genesets, function(x, short_names) { gene_set_index(x, short_names)}, scoring_df$gene_short_name)
#  zscores <- apply(scoring_df$,2, function(mat_col){
gene_set_indices
gene_set_indices <- lapply(gs$genesets, function(genelist){
gene_set_index(genelist,input$short_name)
})
gene_set_index(genelist, scoring_df$short_name)
gene_set_indices <- lapply(gs$genesets, function(genelist){
gene_set_index(genelist, scoring_df$short_name)
})
zscores <- lapply(gene_set_indices,function(gsi){
ztest(scoring_df$test_stat[gsi],scoring_df$test_stat)
})
zscores
zscore_mat<-do.call(rbind,lapply(zscores,unlist))
colnames(zscore_mat)<- gs$geneset.names
dim(zscore_mat)
dim(gs$genesets
)
dim(gs$geneset.names)
gs$genesets
length(gs)
length(gs$genesets)
dim(zscore)
dim(zscore_mat)
colnames(zscore_mat) <- gs$geneset.names
length(gs$geneset.names)
gs$geneset.names
head(zscore_mat)
rownames(zscore_mat) <- gs$geneset.names
colnames(zscore_mat) <- "zscore"
zscore_mat
get_gene_set_ztest <- function(scoring_df, gs){
gene_set_indices <- lapply(gs$genesets, function(genelist){
gene_set_index(genelist, scoring_df$short_name)
})
#  zscores <- apply(scoring_df$,2, function(mat_col){
#			lapply(gene_set_indices,function(gsi){
#					ztest(mat_col[gsi],mat_col)})
#     })
zscores <- lapply(gene_set_indices,function(gsi){
ztest(scoring_df$test_stat[gsi],scoring_df$test_stat)
})
zscore_mat<-do.call(rbind,lapply(zscores,unlist))
rownames(zscore_mat) <- gs$geneset.names
colnames(zscore_mat) <- "zscore"
return(zscore_mat)
}
reactome_zscores<-get_gene_set_ztest(Input.df,reactome_gs)
biocarta_zscores<-get_gene_set_ztest(Input.df,biocarta_gs)
head(biocarta_zscores)
max(biocarta_zscores)
min(biocarta_zscores)
reatome_zscores<-cbind(reactome_zscores,reactome_zscores)
reatome_zscores<-cbind(reactome_zscores,reactome_zscores)
biocarta_zscores<-cbind(biocarta_zscores,biocarta_zscores)
x<-(-log10((biocarta_zscores[,which(colMins(biocarta_pvl_corrected) < 0.01)])))
biocarta_pvl_mat <- get_gene_set_p_vals(Input.df, biocarta_gs, alternative="either")
biocarta_pvl_corrected <- get_gene_set_q_vals(biocarta_pvl_mat)
biocarta_pvl_corrected<-rbind(biocarta_pvl_corrected,biocarta_pvl_corrected)
x<-(-log10((biocarta_zscores[,which(colMins(biocarta_pvl_corrected) < 0.01)])))
x<-(-log10((biocarta_zscores[which(colMins(biocarta_pvl_corrected) < 0.01),])))
x
x<-((biocarta_zscores[which(colMins(biocarta_pvl_corrected) < 0.01),]))
x
x_ordered<-x[order(x[,1], decreasing=TRUE),]
x_ordered<-as.matrix(x_ordered)
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=InputCols,dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
x<-((reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.01),]))
reactome_pvl_mat <- get_gene_set_p_vals(Input.df, reactome_gs,alternative="either")
reactome_pvl_corrected <- get_gene_set_q_vals(reactome_pvl_mat)
reactome_pvl_corrected<-rbind(reactome_pvl_corrected,reactome_pvl_corrected)
x<-((reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.01),]))
x_ordered<-x[order(x[,1], decreasing=TRUE),]
if(length(x_ordered)>50){x_ordered<-x_ordered[1:50,]}
x_ordered<-as.matrix(x_ordered)
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=InputCols,dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=InputCols,dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=InputCols,dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=InputCols,dendrogram="row", labCol=c(""))
heatmap.2(x_ordered, trace="none", col=InputCols,dendrogram="row", labCol=c(""))
heatmap.2(x_ordered, trace="none", col=InputCols,dendrogram="row", labCol=c(""))
x<-((reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.01),]))
x_ordered<-x[order(x[,1], decreasing=TRUE),]
if(length(x_ordered)>50){x_ordered<-x_ordered[1:50,]}
dim(reactome_zscores)
reatome_zscores<-cbind(reactome_zscores,reactome_zscores)
x<-((reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.01),]))
x_ordered<-x[order(x[,1], decreasing=TRUE),]
if(length(x_ordered)>50){x_ordered<-x_ordered[1:50,]}
x
x_ordered<-x[order(x[,1], decreasing=TRUE),]
x_ordered<-x[order(x[1,], decreasing=TRUE),]
x_ordered<-x[order(x[1,], decreasing=TRUE),]
x<-((reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.01),]))
x
dim(x)
length(x)
x<-((reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.001),]))
dim(x)
length(x)
x_ordered<-x[order(x, decreasing=TRUE),]
x_ordered<-x[order(x, decreasing=TRUE)]
if(length(x_ordered)>50){x_ordered<-x_ordered[1:50,]}
x_ordered<-as.matrix(x_ordered)
heatmap.2(x_ordered, trace="none", col=InputCols,dendrogram="row", labCol=c(""))
x<-((reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.001),]))
x_ordered<-x[order(x, decreasing=TRUE)]
if(length(x_ordered)>50){x_ordered<-x_ordered[1:50,]}
x_ordered<-as.matrix(x_ordered)
heatmap.2(x_ordered, trace="none", col=InputCols,dendrogram="row", labCol=c(""))
x
dim(reactome_zscores)
reatome_zscores<-cbind(reactome_zscores,reactome_zscores)
dim(reactome_zscores)
reactome_zscores<-cbind(reactome_zscores,reactome_zscores)
x<-((reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.001),]))
x_ordered<-x[order(x, decreasing=TRUE)]
if(length(x_ordered)>50){x_ordered<-x_ordered[1:50,]}
x_ordered<-as.matrix(x_ordered)
heatmap.2(x_ordered, trace="none", col=InputCols,dendrogram="row", labCol=c(""))
z
x
x<-((reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.001),]))
x
dim(reactome_zscores)
x<-reactome_zscores[which(colMins(reactome_pvl_corrected) < 0.001),]
x
dim(x)
x_ordered<-x[order(x[,1], decreasing=TRUE),]
if(length(x_ordered)>50){x_ordered<-x_ordered[1:50,]}
x_ordered<-as.matrix(x_ordered)
heatmap.2(x_ordered, trace="none", col=InputCols,dendrogram="row", labCol=c(""))
max(x)
min(x)
specCols<-brewer.pal(3,"RdYlBu")
colPal<-colorRampPalette(specCols)
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=colPal(100),dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
specCols<-brewer.pal(3,"RdYlBu")
library(RColorBrewer)
specCols<-brewer.pal(3,"RdYlBu")
colPal<-colorRampPalette(specCols)
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=colPal(100),dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
specCols<-brewer.pal(2,"RdYlBu")
colPal<-colorRampPalette(specCols)
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=colPal(100),dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=colPal(100),dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
pal<-colorRamp(c("Red","Blue"))
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=pal(100),dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=pal(100),dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
pal<-colorRampPalette(c("Red","Blue"))
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=pal(100),dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=pal(100),dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
InputCols<-maPalette(low="blue",high="red",k=100)
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=InputCols,dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
heatmap.2(x_ordered, trace="none", margins=c(5,20), col=InputCols,dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
windowMargin<-1000
View(embryonic_directories)
View(df.pop.unique)
head(embryonic_directories)
lincs
