library(cummeRbund)
sessionInfo()
reps<-replicates(cuff)
dir<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/diffs/Celrr_vs_WT_Adult"
setwd(dir)
strain<-"Cellr"
cuff<-readCufflinks(gtfFile="/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/annotation/mm10_gencode_vM2_with_lncRNAs_and_LacZ.gtf",genome="mm10")
library(cummeRbund)
cuff<-readCufflinks(gtfFile="/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/annotation/mm10_gencode_vM2_with_lncRNAs_and_LacZ.gtf",genome="mm10")
reps<-replicates(cuff)
files<-lapply(reps$file,function(x){strsplit(x, "/")})
files<-as.data.frame(files)
View(files)
samples<-as.data.frame(t(files[10,]))
View(samples)
samples<-(t(files[10,]))
View(samples)
print(xtable(samples),type="html")
library(xtable)
print(xtable(samples),type="html")
View(samples)
rownames(samples)<-NULL
View(samples)
print(xtable(samples),type="html")
myGeneID<-strain
myGene<-getGene(cuff, myGeneID)
runInfo()
runInfo(cuff)
myGeneID<-LacZ
myGeneID<-"LacZ""
myGeneID<-"LacZ"
myGeneID<-"LacZ"
myGene<-getGene(cuff, myGeneId)
myGene<-getGene(cuff, myGeneID)
expressionPlot(myGene)
expressionPlot(myGene, replicates=TRUE)
expressionBarplot(myGene,replicates=T)
expressionPlot(myGene, replicates=TRUE)
fpkm(myGene)
replicateFpkm(myGene)
strain<-"Celrr"
myGeneID<-strain
myGene<-getGene(cuff, myGeneID)
expressionPlot(myGene)
expressionPlot(myGene, replicates=TRUE)
expressionPlot(isoforms(myGene))
expressionPlot(isoforms(myGene), replicates=T)
expressionBarplot(myGene)
expressionBarplot(myGene,replicates=T)
myGeneID<-"LacZ"
myGene<-getGene(cuff, myGeneID)
expressionBarplot(myGene,replicates=T)
library(knitr)
analysisdir<-("/n/rinn_data1/users/agroff/GITHUB/BrainMap/analysis/")
diffdir<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/diffs"
setwd(diffdir)
files<-list.files()
names<-files
split<-data.frame(strsplit(names,"_"))
rownames(split)<-c("strain","vs","wt","timepoint")
adult_directories<-split[,which(split[4,]=="Adult")]
setwd(analysisdir)
i<-1
strain <-as.character(adult_directories[1,i])
timepoint<-"Adult"
filename<-paste(adult_directories[,i],collapse="_")
dir<-paste(diffdir,filename,sep="/")
print(filename)
print(dir)
print(strain)
knit2html('StrainTemplate.Rmd',output=paste(filename,".md", sep=""), quiet=TRUE)
genotypingGeneIDs<-c(strain,"LacZ","Eif2s3y")
genotypingGenes<-getGenes(cuff,genotypingGeneIDs)
expressionBarplot(genotypingGenes)
expressionBarplot(genotypingGenes,replicates=T)
?expressionBarplot
strain <-as.character(adult_directories[1,i])
timepoint<-"Adult"
filename<-paste(adult_directories[,i],collapse="_")
dir<-paste(diffdir,filename,sep="/")
#output<-paste(analysisdir,filename,sep="/")
print(filename)
print(dir)
print(strain)
knit2html('StrainTemplate.Rmd',output=paste(filename,".md", sep=""), quiet=TRUE)
i<-1
strain <-as.character(adult_directories[1,i])
timepoint<-"Adult"
filename<-paste(adult_directories[,i],collapse="_")
dir<-paste(diffdir,filename,sep="/")
#output<-paste(analysisdir,filename,sep="/")
print(filename)
print(dir)
print(strain)
knit2html('StrainTemplate.Rmd',output=paste(filename,".md", sep=""), quiet=TRUE)
setwd("/n/home06/agroff/coursera/Exploratory_data_analysis")
setwd(analysisdir)
dir<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/diffs/linc-Enc1_vs_WT_Embryonic/"
strain<-"linc-Enc1"
dir<-"/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/diffs/linc-Enc1_vs_WT_Embryonic/"
strain<-"linc-Enc1"
alpha<-0.05
setwd(dir)
library(cummeRbund)
library(xtable)
library(limma)
library(GSA)
library(gplots)
library(marray)
library(ggplot2)
library(gtable)
library(gridExtra)
reactome_gs <- GSA.read.gmt("/n/rinn_data1/users/agroff/GSEA/c2.cp.reactome.v4.0.symbols.gmt")
biocarta_gs <- GSA.read.gmt("/n/rinn_data1/users/agroff/GSEA/c2.cp.biocarta.v4.0.symbols.gmt")
```
cuff<-readCufflinks(gtfFile="/n/rinn_data1/seq/lgoff/Projects/BrainMap/data/annotation/mm10_gencode_vM2_with_lncRNAs_and_LacZ.gtf",genome="mm10") #rebuild=T until all first rounds done! build sep though bc issues :-/
population<-genes(cuff)
population.diff<-diffData(population)
annotation<-annotation(genes(cuff))
gene_names<-merge(annotation,population.diff)
gene_set_index <- function(genelist, short_names){
which(short_names %in% genelist)
}
get_gene_set_p_vals <- function(input, gs, alternative){
gene_set_indices <- lapply(gs$genesets, function(short_name){
gene_set_index(input$short_name, short_name)
})
pvl<-lapply(gene_set_indices,geneSetTest,input$test_stat, alternative=alternative)
pvl_mat<-as.data.frame(t(unlist(pvl)))
colnames(pvl_mat) <- gs$geneset.names
return(pvl_mat)
}
get_gene_set_q_vals <- function(pvl_mat, method="bonferroni"){
comp_corrected <- matrix(p.adjust(pvl_mat, method=method), nrow=nrow(pvl_mat), ncol=ncol(pvl_mat))
colnames(comp_corrected) <- colnames(pvl_mat)
rownames(comp_corrected) <- rownames(pvl_mat)
return(comp_corrected)
}
colMins<-function(x){
apply(x,2,min)
}
rowMins<-function(x){
apply(x,1,min)
}
InputCols<-maPalette(low="white",high="red",k=100)
```
```{r gsea}
df.pop<-data.frame("short_name"=toupper(gene_names$gene_short_name),"test_stat"=gene_names$test_stat)
#row.names(df.pop)=population.diff$gene_id
df.pop.unique<-unique(df.pop)
rownames(df.pop.unique)<-NULL
df.pop.unique.ordered<-df.pop.unique[order(df.pop.unique$test_stat),]
Input.df<-df.pop.unique.ordered
reactome_pvl_mat <- get_gene_set_p_vals(Input.df, reactome_gs,alternative="mixed")
reactome_pvl_corrected <- get_gene_set_q_vals(reactome_pvl_mat)
reactome_pvl_corrected<-rbind(reactome_pvl_corrected,reactome_pvl_corrected)
biocarta_pvl_mat <- get_gene_set_p_vals(Input.df, biocarta_gs, alternative="mixed")
biocarta_pvl_corrected <- get_gene_set_q_vals(biocarta_pvl_mat)
biocarta_pvl_corrected<-rbind(biocarta_pvl_corrected,biocarta_pvl_corrected)
```
```{r print_GSEA_biocarta, fig.height=20, fig.width=10}
x<-(-log10(t(biocarta_pvl_corrected[,which(colMins(biocarta_pvl_corrected) < 0.001)])))
x_ordered<-x[order(x[,1], decreasing=TRUE),]
x_ordered_subset<-x_ordered[1:50,]
noinfinities_x<-x_ordered_subset[which(x_ordered_subset !="Inf")]
x_max<-max(noinfinities_x)+100
x_ordered_subset[x_ordered_subset=="Inf"]<-x_max
heatmap.2(x_ordered_subset, trace="none", margins=c(5,20), col=InputCols,dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
#dev.off()
#print to report
#heatmap.2(x_ordered_subset, trace="none", margins=c(5,30), col=InputCols,dendrogram="row",lhei =c(0.1,0.9), labCol=c(""))
x<-(-log10(t(reactome_pvl_corrected[,which(colMins(reactome_pvl_corrected) < 0.0001)])))
x_ordered<-x[order(x[,1], decreasing=TRUE),]
x_ordered_subset<-x_ordered[1:50,]
noinfinities_x<-x_ordered_subset[which(x_ordered_subset !="Inf")]
x_max<-max(noinfinities_x)+100
x_ordered_subset[x_ordered_subset=="Inf"]<-x_max
heatmap.2(x_ordered_subset, trace="none", margins=c(5,20),col=InputCols,dendrogram="both",lhei = c(0.1,0.90), labCol=c(""))
setwd(analysisdir)
population<-genes(cuff)
population.diff<-diffData(population)
annotation<-annotation(genes(cuff))
gene_names<-merge(annotation,population.diff)
gene_set_index <- function(genelist, short_names){
which(short_names %in% genelist)
}
get_gene_set_p_vals <- function(input, gs, alternative){
gene_set_indices <- lapply(gs$genesets, function(short_name){
gene_set_index(input$short_name, short_name)
})
pvl<-lapply(gene_set_indices,geneSetTest,input$test_stat, alternative=alternative)
pvl_mat<-as.data.frame(t(unlist(pvl)))
colnames(pvl_mat) <- gs$geneset.names
return(pvl_mat)
}
get_gene_set_q_vals <- function(pvl_mat, method="bonferroni"){
comp_corrected <- matrix(p.adjust(pvl_mat, method=method), nrow=nrow(pvl_mat), ncol=ncol(pvl_mat))
colnames(comp_corrected) <- colnames(pvl_mat)
rownames(comp_corrected) <- rownames(pvl_mat)
return(comp_corrected)
}
colMins<-function(x){
apply(x,2,min)
}
rowMins<-function(x){
apply(x,1,min)
}
InputCols<-maPalette(low="white",high="red",k=100)
df.pop<-data.frame("short_name"=toupper(gene_names$gene_short_name),"test_stat"=gene_names$test_stat)
#row.names(df.pop)=population.diff$gene_id
df.pop.unique<-unique(df.pop)
rownames(df.pop.unique)<-NULL
df.pop.unique.ordered<-df.pop.unique[order(df.pop.unique$test_stat),]
Input.df<-df.pop.unique.ordered
reactome_pvl_mat <- get_gene_set_p_vals(Input.df, reactome_gs,alternative="mixed")
reactome_pvl_corrected <- get_gene_set_q_vals(reactome_pvl_mat)
reactome_pvl_corrected<-rbind(reactome_pvl_corrected,reactome_pvl_corrected)
biocarta_pvl_mat <- get_gene_set_p_vals(Input.df, biocarta_gs, alternative="mixed")
